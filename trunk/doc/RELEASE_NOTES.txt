OVal 1.20
=========

New features:  
-------------  
+ added support for Apache Commons JEXL as expression language 
+ added @net.sf.oval.constraint.EqualToField (thanks to anydoby for the idea) 
+ added @net.sf.oval.constraint.NotEqualToField (thanks to anydoby for the idea) 
+ added @net.sf.oval.constraint.DateRange (thanks to anydoby for the idea) 
+ added Japanse translation of the constraint violation messages [ 1911078 ] (thanks to Shinpei Ohtani) 
 
Issues solved: 
-------------- 
- fixed bug [ 1885645 ] Validator.validateFieldValue should not return null 
- fixed bug [ 1834537 ] NullPointerException in constraintViolation.getCauses() 
- fixed bug [ 1852088 ] Incorrect default message for NotEqual validation 
- fixed bug [ 1852087 ] Corrupt default localized messages 
- fixed bug [ 1868301 ] OVal with groovy - Performance Evaluation 
- fixed bug [ 1917978 ] Length of @Column should be ignored if @Lob is present 
- fixed bug [ 1934263 ] Versionconflict with WLS10.0 Clientlib 


OVal 1.10
=========

New features: 
------------- 
 + five new built-in constraints @AssertURL, @InstanceOfAny, @MemberOf, @NotEqual, @NotMemberOf
 + errorCode and severity can now be specified for constraints
 + added support for object-level constraints (compound constraints)
 + support for Ruby as constraints expression language
 + constraints violation messages translated into Chinese, Dutch, Hungarian, Italian, Norwegian, Portuguese, Romanian, Russian, Spanish, Swedish, Turkish
 + support for different logging frameworks/facades, so far: JDK logging, Log4J, commons logging

1.0 to 1.1 Migration Notes:
---------------------------
 * net.sf.oval.exception.ConstraintsViolatedException was moved from package net.sf.oval.guard
 * net.sf.oval.exception.ExceptionTranslator was moved from package net.sf.oval.guard
 * net.sf.oval.exception.ExceptionTranslatorJDKExceptionsImpl was moved from package net.sf.oval.guard
 * @AssertTrue, @AssertFalse are now evaluating the String representation of a value if it is not of type Boolean/boolean
 * @AssertValid now recursively checks Arrays, Lists and Maps containing List, Map and Array items
 * renamed method Validator.validateField(...) to Validator.validateFieldValue(...)
 
 
OVal 1.0
========

New features:
-------------
+ New constraints (@NotBlank)
+ Support for OGNL and MVEL as constraint expression language

0.9 to 1.0 Migration Notes:
---------------------------
a) Validator.setMessageResolver and Validator.getMessageResolver are now static, 
   this means the same message resolver instance is used with all Validator/Guard instances 
b) Class net.sf.oval.collection.CollectionFactoryHolder has been moved to package net.sf.oval.internal.
   This class should not be used directly, the collection factory in use can be retrieved via
   the static method Validator.getCollectionFactory and set with the static method Validator.setCollectionFactory
c) @Guarded.applyFieldConstraintsToSetter has been renamed to @Guarded.applyFieldConstraintsToSetters
d) JPAAnnotationsConfigurer constraint mappings extended:
   @javax.persistence.OneToOne  => @net.sf.oval.constraints.AssertValid
   @javax.persistence.OneToMany => @net.sf.oval.constraints.AssertValid
   @javax.persistence.ManyToOne => @net.sf.oval.constraints.AssertValid
	
OVal 0.9
========

New features:
-------------
+ Scripting Support (Groovy, JavaScript, BeanShell) for class invariants, Pre-
  and Postconditions (@Assert, @Pre, @Post)
+ Automatic check of class invariants on calls to all non-private methods
+ Check of class invariants, pre-, postconditions can be separately enabled or 
  disabled during runtime
+ New constraints (@CheckWith, @Future, @HasSubstring, @Max, @MaxLength, 
  @MaxSize, @Min, @MinLength, @MinSize, @Past)
+ validating/guarding of static fields and methods is now supported
+ introduced the concept of constraint profiles
+ added Guard.setExceptionTranslator() allowing you to change the type of 
  exception that is thrown on constraint violations

0.8 to 0.9 Migration Notes:
---------------------------
In the effort to add all the new features and to make OVal 1.0 release ready, 
a large part of OVal's code base has been refactored. 

This led to certain changes in the API:

a) Packages with names in plural have been changed to singular
   (e.g. net.sf.oval.constraints => net.sf.oval.constraint)
b) Everything related to programming by contract has been moved into a new 
   package called net.sf.oval.guard. This includes ConstraintsViolatedListener,
   GuardAspect, Guard, @PreValidateThis, @PostValidateThis and others.
c) The Guard class now extends the Validator class, therefore the 
   Guard.getValidator() method has been removed.
d) For class invariants are now checked by default for guarded classes on every
   call to non-private methods. If you require the old behaviour you can disable 
   automatic invariant checking via 
   MyGuardAspect.aspectOf().getGuard().setInvariantCheckingActivated(false)
e) Getter methods now need to be annotated with @IsInvariant if their return
   value should be checked on a object validation via 
   Validator.validate(Object)
f) The Guard's setReportingMode() methods have been replaced with 
   setInProbeMode methods.
