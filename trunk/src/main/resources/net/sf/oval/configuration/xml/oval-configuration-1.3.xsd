<?xml version="1.0" encoding="UTF-8"?>
<!--
	XSD for OVal
 -->
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://oval.sourceforge.net/oval-configuration-1.3.xsd"
	xmlns:tns="http://oval.sourceforge.net/oval-configuration-1.3.xsd" elementFormDefault="qualified" version="1.3.0"
>

<!-- <!ELEMENT field         ( (assert|assertConstraintSet|assertFalse|assertFieldConstraints|assertTrue|assertURL|assertValid|checkWith|equalToField|future|hasSubstring|instanceOf|instanceOfAny|length|matchPattern|max|maxLength|maxSize|min|minLength|minSize|noSelfReference|notEmpty|notEqual|notEqualToField|notNegative|notNull|past|range|size|validateWithMethod)* )> -->
<!-- <!ELEMENT constraintSet ( (assert|assertConstraintSet|assertFalse|assertFieldConstraints|assertTrue|assertURL|assertValid|checkWith|equalToField|future|hasSubstring|instanceOf|instanceOfAny|length|matchPattern|max|maxLength|maxSize|min|minLength|minSize|noSelfReference|notEmpty|notEqual|notEqualToField|notNegative|notNull|past|range|size|validateWithMethod)* )> -->
<!-- <!ELEMENT returnValue   ( (assert|assertConstraintSet|assertFalse|assertFieldConstraints|assertTrue|assertURL|assertValid|checkWith|equalToField|future|hasSubstring|instanceOf|instanceOfAny|length|matchPattern|max|maxLength|maxSize|min|minLength|minSize|noSelfReference|notEmpty|notEqual|notEqualToField|notNegative|notNull|past|range|size|validateWithMethod)* )> -->
<!-- <!ELEMENT parameter     ( (assert|assertConstraintSet|assertFalse|assertFieldConstraints|assertTrue|assertURL|assertValid|checkWith|equalToField|future|hasSubstring|instanceOf|instanceOfAny|length|matchPattern|max|maxLength|maxSize|min|minLength|minSize|noSelfReference|notEmpty|notEqual|notEqualToField|notNegative|notNull|past|range|size|validateWithMethod|nullable)* ) -->

    <element name="oval">
		<annotation>
			<documentation>The oval element is the root of the descriptor.</documentation>
		</annotation>
		<complexType>
			<choice minOccurs="0" maxOccurs="unbounded">
				<element name="class" type="tns:Class" minOccurs="0" />
				<element name="constraintSet" type="tns:ConstraintSet" minOccurs="0" />
			</choice>
		</complexType>
	</element>
    <complexType name="ConstraintsAwareConfigurationElement" abstract="true">
        <annotation>
            <documentation>
                A super type for all types that use constraints.
            </documentation>
        </annotation>
        <!-- TODO:
<!ELEMENT constraintSet ( (...|assertValid|checkWith|equalToField|future|hasSubstring|instanceOf|instanceOfAny|length|matchPattern|max|maxLength|maxSize|min|minLength|minSize|noSelfReference|notEmpty|notEqual|notEqualToField|notNegative|notNull|past|range|size|validateWithMethod)* )>
       -->
        <complexContent>
			<extension base="tns:ConfigurationElement">
                <sequence>
                    <element name="assert" type="tns:Assert" minOccurs="0" maxOccurs="unbounded"/>
                    <element name="assertConstraintSet" type="tns:AssertConstraintSet" minOccurs="0" maxOccurs="unbounded"/>
                    <element name="assertFalse" type="tns:AssertFalse" minOccurs="0" maxOccurs="unbounded"/>
                    <element name="assertFieldConstraints" type="tns:AssertFieldConstraints" minOccurs="0" maxOccurs="unbounded"/>
                    <element name="assertTrue" type="tns:AssertTrue" minOccurs="0" maxOccurs="unbounded"/>
                    <element name="assertURL" type="tns:AssertURL" minOccurs="0" maxOccurs="unbounded"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="ConstraintSet">
        <annotation>
            <documentation>
                Defines a constraint set
            </documentation>
        </annotation>
        <complexContent>
			<extension base="tns:ConstraintsAwareConfigurationElement">
                <attribute name="id" use="required" type="NMTOKEN" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Class">
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<sequence>
					<element name="object" type="tns:Object" minOccurs="0" maxOccurs="1" />
					<choice minOccurs="0" maxOccurs="unbounded">
						<element name="field" type="tns:Field" />
						<element name="constructor" type="tns:Constructor" />
						<element name="method" type="tns:Method" />
					</choice>
				</sequence>
				<attribute name="applyFieldConstraintsToConstructors" use="optional" type="boolean" default="false" />
				<attribute name="applyFieldConstraintsToSetters" use="optional" type="boolean" default="false" />
				<attribute name="assertParametersNotNull" use="optional" type="boolean" default="false" />
				<attribute name="checkInvariants" use="optional" type="boolean" default="false" />
				<attribute name="type" use="required" type="string" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ConfigurationElement" abstract="true">
		<attribute name="overwrite" use="optional" type="boolean" />
	</complexType>
<!--	<complexType name="Constraint" abstract="true">
		<attribute name="errorCode" use="optional" type="string" />
		<attribute name="message" use="optional" type="string" />
		<attribute name="severity" use="optional" type="string" />
	</complexType>
	-->
	<complexType name="Profiles">
		<sequence>
			<element name="string" type="string" />
		</sequence>
	</complexType>

	<complexType name="Field">
        <annotation>
            <documentation>
                Constraints configuration for a field
            </documentation>
        </annotation>
        <complexContent>
			<extension base="tns:ConstraintsAwareConfigurationElement">
				<attribute name="name" use="required" type="QName" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Constructor">
        <annotation>
            <documentation>
                Constraints configuration for a constructor.
                To identify the correct constructor you are required to list all parameters, including parameters you are not intending to specify constraints for.
            </documentation>
        </annotation>
        <complexContent>
			<extension base="tns:ConfigurationElement">
				<sequence minOccurs="0" maxOccurs="unbounded">
					<element name="parameter" type="tns:Parameter" />
				</sequence>
				<attribute name="postCheckInvariants" use="optional" type="boolean" default="false" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Method">
        <annotation>
            <documentation>
                Constraints configuration for a method.
                To identify the correct method you are required to list all parameters, including parameters you are not intending to specify constraints for.
            </documentation>
        </annotation>
        <complexContent>
			<extension base="tns:ConfigurationElement">
				<sequence>
					<element name="parameter" type="tns:Parameter" minOccurs="0" maxOccurs="unbounded" />
                    <element name="preExecution" type="tns:PreExecution" minOccurs="0" maxOccurs="1"/>
                    <element name="returnValue" type="tns:ReturnValue" minOccurs="0" maxOccurs="1"/>
                    <element name="postExecution" type="tns:PostExecution" minOccurs="0" maxOccurs="1"/>
                </sequence>
				<attribute name="name" use="required" type="QName" />
				<attribute name="isInvariant" use="optional" type="boolean" default="false" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Parameter">
        <complexContent>
			<extension base="tns:ConstraintsAwareConfigurationElement">
                <sequence>
<!-- TODO
                    <element name="nullable" minOccurs="0" maxOccurs="unbounded" type="tns:Nullable"/>
-->                    
                </sequence>
                <attribute name="type" use="required" type="QName" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Object">
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<choice minOccurs="0" maxOccurs="unbounded">
					<element name="assert" type="tns:Assert" />
<!-- TODO:
                    <element name="checkWith" type="tns:CheckWith" />
					<element name="validateWithMethod" type="tns:ValidateWithMethod" />
-->
				</choice>
			</extension>
		</complexContent>
	</complexType>
    <complexType name="ReturnValue">
        <annotation>
            <documentation>
                Constraints configuration for the return value of a method
            </documentation>
        </annotation>
<!-- TODO:
<!ELEMENT returnValue ( (assert|assertConstraintSet|assertFalse|assertFieldConstraints|assertTrue|assertURL|assertValid|checkWith|equalToField|future|hasSubstring|instanceOf|instanceOfAny|length|matchPattern|max|maxLength|maxSize|min|minLength|minSize|noSelfReference|notEmpty|notEqual|notEqualToField|notNegative|notNull|past|range|size|validateWithMethod)* )>
<!ATTLIST returnValue overwrite (true|false) #IMPLIED >
        -->
        <complexContent>
            <extension base="tns:ConfigurationElement">

            </extension>
        </complexContent>
    </complexType>
    <complexType name="ProfilesSuperType">
        <sequence>
            <element name="profiles" minOccurs="0" maxOccurs="1" type="tns:Profiles"/>
        </sequence>
    </complexType>
    <complexType name="PreExecution">
        <complexContent>
            <extension base="tns:ConfigurationElement">
                <sequence minOccurs="0" maxOccurs="unbounded">
                    <element name="pre" type="tns:Pre"/>
                </sequence>
                <attribute name="checkInvariants" type="boolean"></attribute>
            </extension>
        </complexContent>
    </complexType>
    <attribute name="Language">
        <simpleType>
            <restriction base="string">
                <enumeration value="bsh"/>
                <enumeration value="beanshell"/>
                <enumeration value="js"/>
                <enumeration value="javascript"/>
                <enumeration value="groovy"/>
                <enumeration value="ognl"/>
            </restriction>
        </simpleType>
    </attribute>
    <attributeGroup name="AssertBaseAttributes">
        <attribute name="errorCode" type="string" use="optional"/>
        <attribute name="message" type="string" use="optional"/>
        <attribute name="severity" type="string" use="optional"/>
    </attributeGroup>
    <complexType name="Pre">
        <annotation>
            <documentation>
                method pre condition - special programming by contract constraints
            </documentation>
        </annotation>
        <complexContent>
             <extension base="tns:ProfilesSuperType">
                 <attribute name="expr" type="string" use="required"/>
                 <attributeGroup  ref="tns:AssertBaseAttributes"/>
                 <attribute name="lang" use="required" ref="tns:Language"/>
             </extension>
        </complexContent>
    </complexType>
    <complexType name="PostExecution">
        <complexContent>
            <extension base="tns:ConfigurationElement">
                <sequence>
                    <element name="post" minOccurs="0" maxOccurs="unbounded" type="tns:Post"/>
                </sequence>
                <attribute name="checkInvariants" type="boolean" use="optional"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="Post">
        <annotation>
            <documentation>
                method post condition - special programming by contract constraints
            </documentation>
        </annotation>
        <complexContent>
             <extension base="tns:ProfilesSuperType">
                 <attribute name="expr" type="string" use="required"/>
                 <attributeGroup  ref="tns:AssertBaseAttributes"/>
                 <attribute name="lang" use="required" ref="tns:Language"/>
             </extension>
        </complexContent>
    </complexType>
    <complexType name="Assert">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.Assert
The node body contains the script expression as CDATA
            </documentation>
        </annotation>
        <complexContent>
             <extension base="tns:ProfilesSuperType">
                 <sequence>
                    <element name="expr" type="string"/>
                 </sequence>
                 <attributeGroup  ref="tns:AssertBaseAttributes"/>
                 <attribute name="lang" use="required" ref="tns:Language"/>
             </extension>
        </complexContent>
    </complexType>
    <complexType name="AssertConstraintSet">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.AssertConstraintSet
            </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:ProfilesSuperType">
                <attribute  name="id" type="NMTOKEN" use="required"/>
                <attribute  name="source" type="NMTOKEN" use="optional"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="AssertFalse">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.AssertFalse
            </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:ProfilesSuperType">
                <attributeGroup  ref="tns:AssertBaseAttributes"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="AssertFieldConstraints">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.AssertFieldConstraints
            </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:ProfilesSuperType">
                <attribute name="fieldName" type="NMTOKEN" use="required"/>
                <attribute name="declaringClass" type="NMTOKEN" use="required"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="AssertTrue">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.AssertTrue
            </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:ProfilesSuperType">
                <attributeGroup  ref="tns:AssertBaseAttributes"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="AssertURL">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.AssertURL
            </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:ProfilesSuperType">
                <sequence>
                    <element name="permittedURIScheme" type="tns:permittedURIScheme" minOccurs="0" maxOccurs="unbounded"/>
                </sequence>
                <attributeGroup  ref="tns:AssertBaseAttributes"/>
                <attribute name="connect" type="boolean" use="required"/>
            </extension>
        </complexContent>
    </complexType>
    <simpleType name="permittedURIScheme">
        <restriction base="string"/>
    </simpleType>
    <complexType name="AssertValid">
        <annotation>
            <documentation>
               built-in single value constraint, corresponds to net.sf.oval.constraint.AssertValid
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT assertValid (profiles?) >
    <!ATTLIST assertValid errorCode CDATA #IMPLIED >
    <!ATTLIST assertValid message CDATA #IMPLIED >
    <!ATTLIST assertValid requireValidElements (true|false) #REQUIRED>
    <!ATTLIST assertValid severity NMTOKEN #IMPLIED >
        -->
    </complexType>
    <complexType name="CheckWith">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.CheckWith
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT checkWith (simpleCheck,profiles?) >
    <!ATTLIST checkWith errorCode CDATA #IMPLIED >
    <!ATTLIST checkWith ignoreIfNull (true|false) #IMPLIED >
    <!ATTLIST checkWith message CDATA #IMPLIED >
    <!ATTLIST checkWith severity NMTOKEN #IMPLIED >
-->
    </complexType>

    <complexType name="SimpleCheck">
        <annotation>
            <documentation>
                name of a class implementing net.sf.oval.constraint.check.CheckWithCheck.SimpleCheck
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT simpleCheck EMPTY>
    <!ATTLIST simpleCheck class NMTOKEN #REQUIRED >
-->
    </complexType>

    <complexType name="EqualToField">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.EqualToField
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT equalToField (profiles?) >
    <!ATTLIST equalToField declaringClass NMTOKEN #IMPLIED>
    <!ATTLIST equalToField errorCode CDATA #IMPLIED >
    <!ATTLIST equalToField fieldName NMTOKEN #REQUIRED >
    <!ATTLIST equalToField message CDATA #IMPLIED >
    <!ATTLIST equalToField severity NMTOKEN #IMPLIED >
    <!ATTLIST equalToField useGetter (true|false) #REQUIRED>
-->
    </complexType>

    <complexType name="Future">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.Future
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT future (profiles?) >
    <!ATTLIST future errorCode CDATA #IMPLIED >
    <!ATTLIST future message CDATA #IMPLIED >
    <!ATTLIST future severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="HasSubstring">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.HasSubstring
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT hasSubstring (profiles?) >
    <!ATTLIST hasSubstring errorCode CDATA #IMPLIED >
    <!ATTLIST hasSubstring ignoreCase (true|false) #REQUIRED >
    <!ATTLIST hasSubstring message CDATA #IMPLIED >
    <!ATTLIST hasSubstring substring CDATA #REQUIRED >
    <!ATTLIST hasSubstring severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="InstanceOf">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.InstanceOf
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT instanceOf (types,profiles?) >
    <!ATTLIST instanceOf errorCode CDATA #IMPLIED >
    <!ATTLIST instanceOf message CDATA #IMPLIED >
    <!ATTLIST instanceOf severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="InstanceOfAny">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.InstanceOfAny
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT instanceOfAny (types,profiles?) >
    <!ATTLIST instanceOfAny errorCode CDATA #IMPLIED >
    <!ATTLIST instanceOfAny message CDATA #IMPLIED >
    <!ATTLIST instanceOfAny severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="Types">
        <!-- TODO:
    <!ELEMENT types (java-type+)>
    <!ELEMENT java-type (#PCDATA)>
        -->
    </complexType>

    <complexType name="Length">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.Length
            </documentation>
        </annotation>
        <!-- TODO:
        <!ELEMENT length (profiles?) >
    <!ATTLIST length errorCode CDATA #IMPLIED >
    <!ATTLIST length max NMTOKEN #IMPLIED >
    <!ATTLIST length message CDATA #IMPLIED >
    <!ATTLIST length min NMTOKEN #IMPLIED >
    <!ATTLIST length severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="MatchPattern">
        <annotation>
            <documentation>
                  built-in single value constraint, corresponds to net.sf.oval.constraint.MatchPattern
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT matchPattern (pattern*,profiles?) >
    <!ATTLIST matchPattern errorCode CDATA #IMPLIED >
    <!ATTLIST matchPattern matchAll (true|false) #REQUIRED >
    <!ATTLIST matchPattern message CDATA #IMPLIED >
    <!ATTLIST matchPattern severity NMTOKEN #IMPLIED >

    <!ELEMENT pattern EMPTY >
    <!ATTLIST pattern flags NMTOKEN #IMPLIED >
    <!ATTLIST pattern pattern CDATA #REQUIRED >
        -->
    </complexType>

    <complexType name="Max">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.Max
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT max (profiles?) >
    <!ATTLIST max errorCode CDATA #IMPLIED >
    <!ATTLIST max max NMTOKEN #REQUIRED >
    <!ATTLIST max message CDATA #IMPLIED >
    <!ATTLIST max severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="MaxLength">
        <annotation>
            <documentation>
                 built-in single value constraint, corresponds to net.sf.oval.constraint.MaxLength
            </documentation>
        </annotation>
        <!-- TODO:
         <!ELEMENT maxLength (profiles?) >
    <!ATTLIST maxLength errorCode CDATA #IMPLIED >
    <!ATTLIST maxLength max NMTOKEN #REQUIRED >
    <!ATTLIST maxLength message CDATA #IMPLIED >
    <!ATTLIST maxLength severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="MaxSize">
        <annotation>
            <documentation>
                  built-in single value constraint, corresponds to net.sf.oval.constraint.MaxSize
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT maxSize (profiles?) >
    <!ATTLIST maxSize errorCode CDATA #IMPLIED >
    <!ATTLIST maxSize max NMTOKEN #REQUIRED >
    <!ATTLIST maxSize message CDATA #IMPLIED >
    <!ATTLIST maxSize severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="MemberOf">
        <annotation>
            <documentation>
                 built-in single value constraint, corresponds to net.sf.oval.constraint.MemberOf
            </documentation>
        </annotation>
        <!-- TODO:
<!ELEMENT memberOf (members*,profiles?) >
    <!ATTLIST memberOf errorCode CDATA #IMPLIED >
    <!ATTLIST memberOf ignoreCase (true|false) #REQUIRED >
    <!ATTLIST memberOf message CDATA #IMPLIED >
    <!ATTLIST memberOf severity NMTOKEN #IMPLIED >

        -->
        <!-- TODO:
        <!ELEMENT members (string*) >
        -->
    </complexType>


    <complexType name="Min">
        <annotation>
            <documentation>
                 built-in single value constraint, corresponds to net.sf.oval.constraint.Min
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT min (profiles?) >
    <!ATTLIST min errorCode CDATA #IMPLIED >
    <!ATTLIST min message CDATA #IMPLIED >
    <!ATTLIST min min NMTOKEN #REQUIRED >
    <!ATTLIST min severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="MinLength">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.MinLength
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT minLength (profiles?) >
    <!ATTLIST minLength errorCode CDATA #IMPLIED >
    <!ATTLIST minLength message CDATA #IMPLIED >
    <!ATTLIST minLength min NMTOKEN #REQUIRED >
    <!ATTLIST minLength severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="MinSize">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.MinSize
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT minSize (profiles?) >
    <!ATTLIST minSize errorCode CDATA #IMPLIED >
    <!ATTLIST minSize message CDATA #IMPLIED >
    <!ATTLIST minSize min NMTOKEN #IMPLIED >
    <!ATTLIST minSize severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="NoSelfReference">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.NoSelfReference
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT noSelfReference (profiles?) >
    <!ATTLIST noSelfReference errorCode CDATA #IMPLIED >
    <!ATTLIST noSelfReference message CDATA #IMPLIED >
    <!ATTLIST noSelfReference severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="NotBlank">
        <annotation>
            <documentation>
               built-in single value constraint, corresponds to net.sf.oval.constraint.NotBlank
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT notBlank (profiles?) >
    <!ATTLIST notBlank errorCode CDATA #IMPLIED >
    <!ATTLIST notBlank message CDATA #IMPLIED >
    <!ATTLIST notBlank severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="NotEmpty">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.NotEmpty
            </documentation>
        </annotation>
        <!-- TODO:
         <!ELEMENT notEmpty (profiles?) >
    <!ATTLIST notEmpty errorCode CDATA #IMPLIED >
    <!ATTLIST notEmpty message CDATA #IMPLIED >
    <!ATTLIST notEmpty severity NMTOKEN #IMPLIED >
    -->
    </complexType>

    <complexType name="NotEqual">
        <annotation>
            <documentation>
                  built-in single value constraint, corresponds to net.sf.oval.constraint.NotEqual
            </documentation>
        </annotation>
        <!-- TODO:
<!ELEMENT notEqual (profiles?) >
    <!ATTLIST notEqual errorCode CDATA #IMPLIED >
    <!ATTLIST notEqual ignoreCase (true|false) #REQUIRED >
    <!ATTLIST notEqual message CDATA #IMPLIED >
    <!ATTLIST notEqual severity NMTOKEN #IMPLIED >
    <!ATTLIST notEqual testString CDATA #IMPLIED >
        -->
    </complexType>

    <complexType name="NotEqualToField">
        <annotation>
            <documentation>
                  built-in single value constraint, corresponds to net.sf.oval.constraint.NotEqualToField
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT notEqualToField (profiles?) >
    <!ATTLIST notEqualToField errorCode CDATA #IMPLIED >
    <!ATTLIST notEqualToField fieldName NMTOKEN #REQUIRED >
    <!ATTLIST notEqualToField message CDATA #IMPLIED >
    <!ATTLIST notEqualToField severity NMTOKEN #IMPLIED >
    <!ATTLIST notEqualToField declaringClass NMTOKEN #IMPLIED>
    <!ATTLIST notEqualToField useGetter (true|false) #REQUIRED>
        -->
    </complexType>

    <complexType name="NotMemberOf">
        <annotation>
            <documentation>
               built-in single value constraint, corresponds to net.sf.oval.constraint.NotMemberOf
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT notMemberOf (members*,profiles?) >
    <!ATTLIST notMemberOf errorCode CDATA #IMPLIED >
    <!ATTLIST notMemberOf ignoreCase (true|false) #REQUIRED >
    <!ATTLIST notMemberOf message CDATA #IMPLIED >
    <!ATTLIST notMemberOf severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="NotNegative">
        <annotation>
            <documentation>
                 built-in single value constraint, corresponds to net.sf.oval.constraint.NotNegative
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT notNegative (profiles?) >
    <!ATTLIST notNegative errorCode CDATA #IMPLIED >
    <!ATTLIST notNegative message CDATA #IMPLIED >
    <!ATTLIST notNegative severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="NotNull">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.NotNull
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT notNull (profiles?) >
    <!ATTLIST notNull errorCode CDATA #IMPLIED >
    <!ATTLIST notNull message CDATA #IMPLIED >
    <!ATTLIST notNull severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="Past">
        <annotation>
            <documentation>
                 built-in single value constraint, corresponds to net.sf.oval.constraint.Past
            </documentation>
        </annotation>
        <!-- TODO:
    <!ELEMENT past (profiles?) >
    <!ATTLIST past errorCode CDATA #IMPLIED >
    <!ATTLIST past message CDATA #IMPLIED >
    <!ATTLIST past severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="Range">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraint.Range
            </documentation>
        </annotation>
        <!-- TODO:
<!ELEMENT range (profiles?) >
    <!ATTLIST range errorCode CDATA #IMPLIED >
    <!ATTLIST range max NMTOKEN #IMPLIED >
    <!ATTLIST range message CDATA #IMPLIED >
    <!ATTLIST range min NMTOKEN #IMPLIED >
    <!ATTLIST range severity NMTOKEN #IMPLIED >
        -->
    </complexType>

    <complexType name="Size">
        <annotation>
            <documentation>
               built-in single value constraint, corresponds to net.sf.oval.constraint.Size
            </documentation>
        </annotation>
        <!-- TODO:
 <!ELEMENT size (profiles?) >
    <!ATTLIST size errorCode CDATA #IMPLIED >
    <!ATTLIST size max NMTOKEN #IMPLIED >
    <!ATTLIST size message CDATA #IMPLIED >
    <!ATTLIST size min NMTOKEN #IMPLIED >
    <!ATTLIST size severity NMTOKEN #IMPLIED >       -->
    </complexType>

    <complexType name="ValidateWithMethod">
        <annotation>
            <documentation>
                built-in single value constraint, corresponds to net.sf.oval.constraints.ValidateWithMethod
            </documentation>
        </annotation>
        <!-- TODO:
         <!ELEMENT validateWithMethod (profiles?) >
    <!ATTLIST validateWithMethod errorCode CDATA #IMPLIED >
    <!ATTLIST validateWithMethod ignoreIfNull (true|false) #IMPLIED >
    <!ATTLIST validateWithMethod message CDATA #IMPLIED >
    <!ATTLIST validateWithMethod severity NMTOKEN #IMPLIED >
    <!ATTLIST validateWithMethod methodName NMTOKEN #REQUIRED >
    <!ATTLIST validateWithMethod parameterType CDATA #REQUIRED >
        -->
    </complexType>

    <complexType name="Nullable">
        <annotation>
            <documentation>
                  built-in exclusion, corresponds to net.sf.oval.constraint.exclusion.Nullable
            </documentation>
        </annotation>
        <!-- TODO:
        <!ELEMENT nullable (profiles?) >
        -->
    </complexType>

</schema>