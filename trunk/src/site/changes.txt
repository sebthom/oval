[-] Bug fixed.
[+] Feature added.
[*] Change.

2012-02-22 v1.81
================
- fixed [ oval-Bugs-3488791 ] xstream alias typo "postExcecution" in XMLConfigurer.java
- fixed [ oval-Bugs-3488245 ] UnsupportedOperationException when using inspectInterfaces
- fixed default message attribute value on JSR303 annotations being misinterpreted
+ extended BeanValidationAnnotationsConfigurer to support method parameter constraints and return value checks on non-getter methods
* upgraded to Spring 3.1.1.RELEASE, AspectJ 1.6.12, JUnit 4.10, XStream 1.4.2, OGNL 3.0.4, CGLib 2.2.2, Groovy 1.8.6, commons-jexl 2.1.1, Paranamer 2.4.1

2011-10-03 v1.80
================
* upgraded to AspectJ 1.6.11, OGNL 3.0.2, JRuby 1.6.4, Groovy 1.8.2, XStream 1.4.1, Rhino 1.7R3, Spring 3.0.6.RELEASE, Javolution 5.5.1
+ added caching of compiled OGNL expressions
+ added caching of compiled MVEL expressions
- fixed message attribute on JSR303 annotations being ignored
* removed deprecated AssertValid.requireValidElements attribute
* removed deprecated class CheckWithMultiple
+ added support for target attribute on constraint annotations

2011-04-05 v1.70
================
* upgraded to AspectJ 1.6.10, Paranamer 2.3, MVEL 2.0.19, Spring 3.0.5.RELEASE, Commons JEXL 2.0.1, OGNL 3.0.1, Groovy 1.7.6
- fixed [ oval-Bugs-3156080 ] OVal fails to load at bean creation time
- fixed [ oval-Bugs-3173470 ] Bug in DigitsCheck
- fixed [ oval-Bugs-3175737 ] Bug while retrieving profile names from JSR group
+ added convenience constructors to XMLConfigurer for easier Spring-based configuration
+ added support for Spring dependencies being injected into SimpleCheck instances
- fixed [ oval-Bugs-3220331 ] Missing sources JAR for OVal in Maven repository
+ small XSD improvements

2010-11-13 v1.61
================
- fixed [ oval-Bugs-3087277 ] @NotBlank ignores non-breaking space
- fixed @EMail not validating addresses correct if allowPersonalName=true

2010-10-13 v1.60
================
- fixed [ oval-Bugs-2994748 ] added missing French translations (thanks to Patrice Lachance)
+ added Validator.reportConstraintViolation allowing check implementations to generate more than one constraint violation
+ added overridable method AnnotationsConfigurer.newCheckInstance to allow implementation of custom check instantiation strategies
+ fixed [ oval-Bugs-2922034 ] added support for constraints specified for method parameters at interface level: @Guard(inspectInterfaces=true) (thanks to Chris Pheby)
- fixed a potential null reference (thanks to jacky163com)
* upgraded to OGNL 3.0, Paranamer 2.2.1, MVEL 2.0.18, Groovy 1.7.5, Spring 3.0.4.RELEASE, JRuby 1.5.3, AspectJ 1.6.9, SLF4J 1.6.1, log4j 1.2.16
+ Validator now eagerly checks Java SecurityManager configuration for suppressAccessChecks ReflectionPermission during instantiation
+ added @<Constraint>.List annotations that can hold multiple constraint annotations of the same type
+ added @Email(allowPersonalName=true/false) (thanks to Eric Lewis)
+ added SimpleCheckWithMessageVariables (thanks to Eric Lewis)
+ added add/remove CheckInitializationListener methods to AnnotationsConfigurer and XMLConfigurer
+ added BeanInjectingCheckInitializationListener allowing Spring dependencies being injected into Check instances

2010-03-29 v1.50
================
* upgraded to AspectJ 1.6.8, JUnit 4.8.1, SLF4J 1.5.11, MVEL 2.0.16, Paranamer 2.2, JRuby 1.4.0
- fixed [ oval-Bugs-2879918 ] Difference in keys between Annotations and Properties file
- added missing violation message for @AssertValid (thanks to Eric Lewis)
- fixed [ oval-Bugs-2890683 ] Where is 'net.sf.oval.constraint.AssertURL.violated'
+ JPAAnnotationsConfigurer now also interprets annotated getter methods
- fixed [ oval-Bugs-2894631 ] ClassCastException when validating arrays
+ @Size now checks the length of the value's String representation if the value is not a map, a list, or an array
+ added @AssertNull, @Digits constraints
+ added BeanValidationAnnotationsConfigurer to translate standard JSR303 constraint annotations into OVal constraints
    @javax.validation.constraints.AssertFalse    => net.sf.oval.constraint.AssertFalseCheck
    @javax.validation.constraints.AssertTrue     => net.sf.oval.constraint.AssertTrueCheck
    @javax.validation.constraints.DecimalMax     => net.sf.oval.constraint.MaxCheck
    @javax.validation.constraints.DecimalMin     => net.sf.oval.constraint.MinCheck
    @javax.validation.constraints.Digits         => net.sf.oval.constraint.DigitsCheck
    @javax.validation.constraints.Future         => net.sf.oval.constraint.FutureCheck
    @javax.validation.constraints.Max            => net.sf.oval.constraint.MaxCheck
    @javax.validation.constraints.Min            => net.sf.oval.constraint.MinCheck
    @javax.validation.constraints.NotNull        => net.sf.oval.constraint.NotNullCheck
    @javax.validation.constraints.Null           => net.sf.oval.constraint.AssertNullCheck
    @javax.validation.constraints.Past           => net.sf.oval.constraint.PastCheck
    @javax.validation.constraints.Pattern        => net.sf.oval.constraint.PatternCheck
    @javax.validation.Valid                      => net.sf.oval.constraint.AssertValidCheck
+ implemented [ oval-Bugs-2907399] added MessageValueFormatter and Validator.setMessageValueFormatter()
- fixed [ oval-Bugs-2973326] XMLConfigurer doesn't completely cover constraints
- fixed [ oval-Bugs-2973323 ] XSD scheme is not complete
- fixed [ oval-Bugs-2973328 ] XMLConfigurer doesn't parse appliesTo for constraints
- fixed [ oval-Bugs-2973339 ] Defaults are not applied to checks
- fixed [ oval-Bugs-2973334 ] XMLConfigurer doesn't allow to parse when expressions
- fixed [ oval-Bugs-2973344 ] NotNull checks for container values
* changed @EMail regex pattern to support some rare email names [ oval-Bugs-2910553 ]

2009-09-27 v1.40
================
+ added support for conditional constraint activation (added the when="" attribute)
* upgraded to GNU Trove 2.0.4, SLF4J 1.5.8, JRuby 1.3.1, Rhino 1.7R2, Groovy 1.6.4, MVEL 2.0.13, Paranamer 2.1
- parameter "declaringClass" of @AssertFieldConstraints was ignored during constraint validation
- fixed [ 2836116 ] DateRangeCheck contains bug in getMinMillis()
+ implemented [ 2821805] @DateRange should be tolerant
- corrected checking of BigDecimal by @NotNegative constraint  (thanks to Saleem)
+ added tolerance to @Past and @Future
+ implemented [ 2859133 ] Enhancement:@MatchPattern should be able to negate the match (thanks to Eric Lewis)
+ added ConstraintViolation.getCheckDeclaringContext() (thanks to Eric Lewis)
+ added appliesTo() attribute to constraints allowing to control if and how validation should be applied to childs of arrays, maps and collections (thanks to tomtran711)
- fixed [ 2799870 ] Wrong escaped unicode sequences in Messages_de.properties
- fixed [ 2865777 ] Wrong English error message for MinLength

2009-05-10 v1.32
================
+ added Brazilian Portuguese translation of the constraint violation messages [ 2593104 ] (thanks to Leonardo Pinto)
+ introduced an interface implemented by Validator for supporting easier mocking
- fixed [ 2493925 ] java.util.NoSuchElementException if @AssertValid is used
- fixed [ 2495825 ] The profile feature of Validator is not thread safe
- fixed [ 2493379 ] array types in xml based configuration
- fixed [ 2579897 ] xml based configuration related to post/pre checks
- fixed [ 2723344 ] Should not call any method on not fully initialized object
- fixed [ 2723413 ] translated JDK exception should keep the cause
* French translation updated (thanks to  ï¿½ric Vigeant)
* upgraded Groovy 1.6.2, MVEL 2.0.8, Paranamer 1.3, JRuby 1.2.0, cglib 2.2,Spring 2.5.6SEC01
* removed the DTD for XML Configuration, use the XSD instead
- fixed NPE in JDK Logger implementation (thanks to Carsten Siedentop)
+ added an @Email constraint (thanks to Musachy Barosso)


2008-12-27 v1.31
================
- fixed Object level constraints defined in XML were ignored by the XMLConfigurator (thanks to Niels Kirkegaard)
- fixed [ 2063142 ] doc typo
- fixed prefix of default constraint message codes (changed from net.sf.oval.constraints to net.sf.oval.constraint)
- fixed an issue where OVal was translating exception thrown by guarded methods into ValidationFailedException
- fixed bug [ 2164438 ] SerializableField bug when dealing with private fields
- fixed bug [ 2166232 ] JPAAnnotationsConfigurer should use AssertValidCheck for @ManyToMany
- fixed bug [ 2192175 ] Validator.validate checks the same object multiple times
* upgraded Spring 2.5.6, Groovy 1.5.7, MVEL 1.3.15, Paranamer 1.1.6, jRuby 1.1.6, AspectJ 1.6.2, XStream 1.3.1
+ added support for multi-valued constraints
* JPAAnnotationsConfigurer now interprets @Column.precision/scale for numeric fields
- fixed [ oval-Bugs-2406574 ] wrong scripting language enumerations in xsd and dtd


2008-08-10 v1.30
================
- fixed an StackOverflowError that occurs when referencing the same property via _this.<property_name> in scripted pre/post conditions
- fixed some issues in the DTD
* migrated from Ant to Maven as project build system
* upgraded to AspectJ 1.6.1
* upgraded to Groovy 1.5.6
* upgraded to JRuby 1.1.3
* upgraded to MVEL 1.3.11
* upgraded to OGNL 2.7.3
* upgraded to Paranamer 1.1.4
* upgraded to Spring 2.5.5
* changed parameter substring() of annotation @HasSubstring() to value() which allows less verbose usage, e.g. @HasSubstring("foo") instead of @HasSubstring(substring="foo")
* OVal now respects the order in which constraint annotations are returned by the reflection API when validating objects (thanks to CannyDuck)
+ @MatchPattern can now match against multiple patterns
+ added support for logging via SLF4J
+ added constraint check exclusion feature which can be used for fine-grained deactivation of constraints
+ added @net.sf.oval.constraint.exclusion.Nullable constraint check exclusion
* renamed MessageResolverImpl to ResourceBundleMessageResolver
* moved MessageResolver classes from net.sf.oval.localization to net.sf.oval.localization.message
+ introduced net.sf.oval.localization.context.OValContextRenderer
+ added constraint configuration XSD as replacement for the DTD
+ constraints declared without any profiles are associated with a profile named "default" automatically
- fixed bug [ 2023617 ] @ValidateWithMethod in super classes do not work
+ ConstraintViolation now provides more details about the violated constraint (checkName, messageVariables, messageTemplate)
+ added support for using Spring AOP to enable programming by contract for Spring managed beans
+ greatly simplified usage of the probe mode feature


2008-04-05 v1.20
================
* upgraded to MVEL 1.2.24
* upgraded to Javolution 5.2.6
* upgraded to AspectJ 1.5.4
* upgraded to Groovy 1.5.4
* upgraded to JRuby 1.0.3
* upgraded to Paranamer 1.1.2
* upgraded to Rhino 1.7R1
* upgraded to GNU Trove 2.0.3
* upgraded to XStream 1.3
- fixed bug [ 1885645 ] Validator.validateFieldValue should not return null
- fixed bug [ 1834537 ] NullPointerException in constraintViolation.getCauses()
- fixed bug [ 1852088 ] Incorrect default message for NotEqual validation
- fixed bug [ 1852087 ] Corrupt default localized messages
- fixed bug [ 1868301 ] OVal with groovy - Performance Evaluation
- fixed bug [ 1917978 ] Length of @Column should be ignored if @Lob is present
- fixed bug [ 1934263 ] Versionconflict with WLS10.0 Clientlib
* changed scope of AnnotationsConfigurer.initializeCheck(...) to protected to allow better customization of the instantiation of checks
+ added support for Apache Commons JEXL as expression language
+ added @net.sf.oval.constraint.EqualToField (thanks to anydoby for the idea)
+ added @net.sf.oval.constraint.NotEqualToField (thanks to anydoby for the idea)
+ added @net.sf.oval.constraint.DateRange (thanks to anydoby for the idea)
+ added Japanse translation of the constraint violation messages [ 1911078 ] (thanks to Shinpei Ohtani)


2007-11-02 v1.10
================
Built-in constraints:
 + added @net.sf.oval.constraint.AssertURL (thanks to Makkari)
 + added @net.sf.oval.constraint.InstanceOfAny
 + added @net.sf.oval.constraint.MemberOf
 + added @net.sf.oval.constraint.NotEqual
 + added @net.sf.oval.constraint.NotMemberOf
 + added errorCode property
 + added severity property

Expression languages:
 + added support for Ruby (JRuby) as expression language

Localization:
 * update Polish translation of the constraint violation messages (thanks to Christopher Faryna)
 + added new translations of the constraint violation messages:
   + Chinese (thanks to kindloaf)
   + Dutch (thanks to miep)
   + Hungarian (thanks to Gabor Nagy)
   + Italian (thanks to Mastermind X)
   + Norwegian (thanks to Simen RÃ¸kaas)
   + Portuguese (thanks to Rubem Azenha)
   + Romanian (thanks to A. Mate)
   + Russian (thanks to Andrey Qwerty)
   + Spanish (thanks to Luis Garcia Sevillano)
   + Swedish (thanks to Johan Hedberg)
   + Turkish (thanks to Merdan Nouryev)

Testing:
 + added multi threading test for net.sf.oval.Validator
 + added tests for net.sf.oval.constraints.*Check classes

Validator:
 + added method Validator.assertValid(...)
 + added method Validator.assertValidFieldValue(...)
 * renamed method Validator.validateField(...) to Validator.validateFieldValue(...)
 * @AssertValid now recursively checks Arrays, Lists and Maps containing List, Map and Array items
 + added support for object-level constraints (@Assert, @CheckWith and @ValidateWithMethod can now be declared on class-level)

Refactoring:
 * net.sf.oval.exception.ConstraintsViolatedException moved from package net.sf.oval.guard
 * net.sf.oval.exception.ExceptionTranslator moved from package net.sf.oval.guard
 * net.sf.oval.exception.ExceptionTranslatorJDKExceptionsImpl moved from package net.sf.oval.guard

Other Changes:
 * AssertTrue, AssertFalse are now evaluating the String representation of a value if it is not of type Boolean/boolean
 - Configuring validateWithMethod constraints via XML was broken (thanks to Ramon Buckland)
 + added support for different logging frameworks/facades, so far: Log4J, commons logging


2007-07-22 v1.0
===============
Annotation configuration:
 - JPAAnnotationsConfigurer does not configure a NotNullCheck for fields with @Column(nullable=false)
   that also have @javax.persistence.GeneratedValue or @javax.persistence.Version specified
 * renamed @Guarded.applyFieldConstraintsToSetter to @Guarded.applyFieldConstraintsToSetters
 + added @Guarded.applyFieldConstraintsToConstructors to @Guarded.applyFieldConstraintsToConstructors
 * JPAAnnotationsConfigurer constraint mappings extended:
  @javax.persistence.OneToOne  => @net.sf.oval.constraints.AssertValid
  @javax.persistence.OneToMany => @net.sf.oval.constraints.AssertValid
  @javax.persistence.ManyToOne => @net.sf.oval.constraints.AssertValid

Built-in constraints:
 + added @net.sf.oval.constraint.NotBlank (thanks to Dennis Kieselhorst)

Expression languages:
 + added support for OGNL as expression language
 + added support for MVEL as expression language

XML configuration:
 - fixed some issues with the XML configuration DTD (e.g. [ Bug 1728672 ])

Other changes:
 + localization support for several exception types added
 + added static Validator.getCollectionFactory method
 + added static Validator.setCollectionFactory method
 * made Validator.setMessageResolver method static
 * made Validator.getMessageResolver method static
 * moved net.sf.oval.collection.CollectionFactoryHolder to net.sf.oval.internal
 - fixed a StackOverflowError that occured during invariant checking for
   guarded classes that override the hashCode() method (thanks to io_exception)
 + documentation improved


2007-03-18 v0.9
===============
Built-in constraints:
  * renamed package net.sf.oval.constraints to net.sf.oval.constraint
  * net.sf.oval.constraint.NoSelfReference: renamed @NotSelfRef to @NoSelfReference
  * net.sf.oval.constraint.MatchPattern: renamed @RegEx to @MatchPattern
  + added @net.sf.oval.constraint.Assert for use with expression languages
  + added @net.sf.oval.constraint.CheckWith (as an alternative to @ValidateWithMethod)
  + added @net.sf.oval.constraint.Future
  + added @net.sf.oval.constraint.HasSubstring
  + added @net.sf.oval.constraint.Max
  + added @net.sf.oval.constraint.MaxLength
  + added @net.sf.oval.constraint.MaxSize
  + added @net.sf.oval.constraint.Min
  + added @net.sf.oval.constraint.MinLength
  + added @net.sf.oval.constraint.MinSize
  + added @net.sf.oval.constraint.Past
  * when @AssertValid is used on a map the map's keys and values are now validated too by default (thanks to tahura)

Annotation configuration:
  * dropped @net.sf.oval.annotations.DefineConstraintSet
  * net.sf.oval.Constraint: moved from package net.sf.oval.annotations
  * added @net.sf.oval.configuration.annotation.IsInvariant

XML configuration:
  - XML configuration now also works for JREs not having the StAX API present
  * simplified the OVal XML configuration DTD

Expression languages:
  + added plugable support for expression languages
  + added support for JavaScript as expression language (via Mozilla Rhino)
  + added support for Groovy as expression language
  + added support for BeanShell as expression language

Validator:
  + validation of static fields and static method return values is now supported

Guard (programming by contract):
  * replaced everything related to Guard.ReportingMode with Guard.isInProbeMode(...) and Guard.setInProbeMode(...)
  + added automatic invariant checking
  + check of pre,post, and/or invariant checks can turned on/off programmatically
  + constraint violation listeners can now also be registered for interfaces
    (= notify about violations for all guarded classes implementing the given interface)
  + introduced @net.sf.oval.guard.Pre for declaring pre conditions with an expression language
  + introduced @net.sf.oval.guard.Post for declaring post conditions with an expression language
  * ConstraintsViolatedException.getMessage() now returns the message of the first constraint violation (thanks to szymon_eu)
  + added Guard.setExceptionTranslator() allowing you to change the type of exception that is thrown on constraint violations
  + guarding of static fields and static method return values is now supported
  * everything related to programming by contract has been moved into a new net.sf.oval.guard package
    * net.sf.oval.ParamenterNameResolverAspectJImpl: moved from package net.sf.oval.aspectj
    * net.sf.oval.guard.ApiUsageAuditor: moved from package net.sf.oval.aspectj
    * net.sf.oval.guard.ApiUsageAuditor2: moved from package net.sf.oval.aspectj
    * net.sf.oval.guard.ConstraintsViolatedException: moved from package net.sf.oval.exceptions
    * net.sf.oval.guard.GuardAspect: moved from package net.sf.oval.aspectj
    * net.sf.oval.guard.GuardAspect2: moved from package net.sf.oval.aspectj
    * net.sf.oval.guard.Guarded: moved from package net.sf.oval.guard
    * net.sf.oval.guard.IsGuarded: moved from package net.sf.oval
    * net.sf.oval.guard.PostValidateThis: moved from package net.sf.oval.annotations
    * net.sf.oval.guard.PreValidateThis: moved from package net.sf.oval.annotations

Other changes:
  + introduced the concept of constraint profiles
  + added polish translation of the constraint violation messages (thanks to szymon_eu)
  + added support for GNU Trove collections
  * renamed package net.sf.oval.collections to net.sf.oval.collection
  * renamed package net.sf.oval.contexts to net.sf.oval.context
  * renamed package net.sf.oval.exceptions to net.sf.oval.exception
  - the ant build script now also creates the dist folder if it does not exist (thanks to tahura)
  + the ant build script now generates "with-depedencies" distribution archives
  * improved the maven bundle


2006-12-10 v0.8
===============
+ added JPAAnnotationsConfigurer to translate EJB3 JPA annotations into OVal constraints
  @javax.persistence.Basic(optional=false)      => @net.sf.oval.constraints.NotNull
  @javax.persistence.OneToOne(optional=false)   => @net.sf.oval.constraints.NotNull
  @javax.persistence.ManyToOne(optional=false)  => @net.sf.oval.constraints.NotNull
  @javax.persistence.Column(nullable=false)     => @net.sf.oval.constraints.NotNull
  @javax.persistence.Column(length=5)           => @net.sf.oval.constraints.Length
* changed the ant script to generate a maven2 bundle jar in the dist target
- AssertConstraintSet constraint was ignored when specified for getter methods' return value
- NPE was thrown when validating objects against an XML based configuration that uses constraint sets
- various fixes regarding XML based configuration (thanks to tahura)
+ added more JUnit tests for the xml configuration
+ net.sf.oval.configuration.POJOConfigurer and all configuration elements are now serializable
+ added support for ParaNamer http://paranamer.codehaus.org/ for method parameter name resolving
+ added a DTD for the XML configuration file
* when @AssertValid is used on a collection the collection's elements are now validated too by default (thanks to tahura)

Refactoring:
* net.sf.oval.annotations.Guarded: annotation @Constrained renamed to @Guarded
* net.sf.oval.aspectj.GuardAspect: aspect ConstraintsEnforcerAspect renamed to GuardAspect
* net.sf.oval.aspectj.GuardAspect2: class ConstraintsEnforcerAspect2 renamed to GuardAspect2
* net.sf.oval.Guard: class ConstraintsEnforcer renamed to Guard


2006-11-12 v0.7
===============
+ added pluggable support for alternative collection implementations
+ added support for Javolution Collection Classes (http://javolution.org/)
+ changed the ant script to include the JUnit test cases in the sources zip file
- fixed some serialization related issues
- fixed NPE in InstanceOfCheck
* reworked the configuration mechanism
    + added net.sf.oval.configuration package
    + added support for POJO based constraint configuration
    + added support for XML based constraint configuration
+ added the concept of constraint sets
  + added @net.sf.oval.annotations.DefineConstraintSet
  + added @net.sf.oval.constraints.AssertConstraintSet
  + added net.sf.oval.exceptions.UndefinedConstraintSetException
  + added net.sf.oval.exceptions.ConstraintSetAlreadyDefinedException
    + added net.sf.oval.Validator.addConstraintSet(ConstraintSetConfiguration)
* made resolving of constraint violation messages customizable
    + added net.sf.oval.MessageResolver
    + added net.sf.oval.MessageResolverImpl
    + added net.sf.oval.Validator.getMessageResolver()
    + added net.sf.oval.Validator.setMessageResolver(MessageResolver)
* removed the "check" property from the net.sf.oval.ConstraintViolation class

Refactoring:
* net.sf.oval.AbstractAnnotationCheck: class AbstractCheck renamed to AbstractAnnotationCheck


2006-08-04 v0.6
===============
+ constraints programmatically specified during runtime via net.sf.oval.Validator.addCheck(...) can now be removed using net.sf.oval.Validator.removeCheck(...)
+ added french translation for the violation messages of the built-in constraints (provided by mimil)
+ added @InstanceOf constraint
* simplified annotation check loading by introducing a check parameter to the @Constraint annotation that is used to specify the constraint check class
* refactored AspectJ related code into separate classes in the package net.sf.oval.aspectj to potentially support other AOP libraries later
* made the code to resolve the variables names of constructor and method parameters configurable via the ParameterNameResolver interface and the Validator.setParameterNameResolver(...) method
+ added @AssertValid constraint
* moved @FieldConstraints from package net.sf.oval.annotations to net.sf.oval.constraints
* @FieldConstraints constraint now also considers constraints added to fields during runtime via Validator.addCheck(...)
* changed all static methods of Validator and ConstraintsEnforcer to non-static to allow multiple validator instances at the same time being configured differently
+ introduced an ignoreIfNull parameter for the @ValidateWithMethod annotation
* net.sf.oval.annotations.PreValidateThis: annotation @PreValidateObject renamed to @PreValidateThis
* net.sf.oval.annotations.PostValidateThis: annotation @PostValidateObject renamed to @PostValidateThis

Refactoring:
- removed net.sf.oval.Validator.setAnnotationCheckLoader(AnnotationCheckLoader)
- removed net.sf.oval.Validator.getAnnotationCheckLoader()
- removed net.sf.oval.AnnotationCheckLoader
- removed net.sf.oval.AnnotationCheckLoaderImpl


2006-04-27 v0.5
===============
- net.sf.oval.Validator: Validation of inherited classes throws NullPointerException [ Bug 1461805 ]
+ added net.sf.oval.ConstraintViolation which now holds the information of a single constraint violation
+ using @net.sf.oval.annotations.FieldConstraints you can now apply constraints defined for fields to any constructor/method parameter or getter method in the same class
+ added support for localizable error messages
+ added support for parameters in constraint violation messages
+ net.sf.oval.context.ConstructorParameterContext: added method getParameterName()
+ net.sf.oval.context.MethodParameterContext: added method getParameterName()
+ the way how the corresponding checks for constraint annotations are resolved/loaded has been made customizable via net.sf.oval.Validator.setAnnotationCheckLoader(AnnotationCheckLoader)
+ constraints can now be specified programmatically during runtime via net.sf.oval.Validator.addCheck(...) -> this allows you to implement alternative configuration mechanisms
* net.sf.oval.exceptions.ConstraintViolationsException: now holds an array of ConstraintViolations
* net.sf.oval.annotations.Validatable: default value for applyFieldConstraintsToSetter() changed from "true" to "false"
* net.sf.oval.Validator: method validate(Object) now returns List<ConstraintViolation> instead of ArrayList<ConstraintViolationException>
* classes only need to be annotated with @net.sf.oval.annotations.Constrain when using the "design by contract" feature in conjunction with AspectJ
+ added the aspect ApiUsageAuditor that will report warnings about unsupported usage of annotations in Eclipse IDE
+ added support for specifying constraints on method return values when using programming by contract (post condition)
* extended the documentation

Refactoring:
* net.sf.oval.Validator: refactored AspectJ related fields and methods into a separate class ConstraintsEnforcer
* net.sf.oval.ClassChecks: Reduced class visibility from public to package
* net.sf.oval.ConstraintsEnforcer: aspect ValidationAspect renamed to ConstraintsEnforcerAspect
* net.sf.oval.ConstraintsViolatatedListener: class ValidationListener renamed to ConstraintsViolatatedListener
* net.sf.oval.ConstraintsViolatatedListener: renamed method onValidationException to onConstraintsViolatedException
* net.sf.oval.ConstraintsViolatatedAdapter: class ValidationAdapter renamed to ConstraintsViolatatedAdapter
* net.sf.oval.annotations.Constrain: renamed @Validatable to @Constrain
* net.sf.oval.annotations.Constraint: renamed @ConstraintAnnotation to @Constraint
* net.sf.oval.constraints.NotSelfRef: renamed @NotThis to @NotSelfRef
* net.sf.oval.exceptions.ConstraintAnnotationNotPresentException: class ValidatableAnnotationNotPresentException renamed to ConstraintAnnotationNotPresentException
* net.sf.oval.exceptions.ConstraintsViolatedException: class ConstraintValidationException renamed to ConstraintsViolatedException


2006-03-17 v0.4
===============
- net.sf.oval.constraints.AbstractCheck: the message specified in constraint annotations was not used in the ConstraintException [ Bug 1449558 ]
* improved test cases in package net.sf.oval.test
- net.sf.oval.ValidationAspect: OVal tried to validate inner classes not having the @Validatable annotation which resulted in net.sf.oval.exceptions.ValidatableAnnotationNotPresent
* net.sf.oval.ValidationAspect: cleaned up and optimized for performance
* net.sf.oval.Validator: cleaned up and optimized for performance
* net.sf.oval.Validator: the removeListener methods now return a boolean value specifying if the listener was registered with the validator

Refactoring:
* net.sf.oval.Validator: renamed onObjectValidationException(..) methods to onConstraintValidationException(..)
* net.sf.oval.exception.ConstraintException: class ConstraintException renamed to ConstraintValidationException
* net.sf.oval.annotations.PreValidateObject: annotation @PreValidate renamed to @PreValidateObject
* net.sf.oval.annotations.PostValidateObject: annotation @PostValidate renamed to @PostValidateObject
* net.sf.oval.contexts: renamed net.sf.oval.context to net.sf.oval.contexts
* net.sf.oval.contexts.ValidationContext: changed from class to interface
* net.sf.oval.Validator: renamed field defaultValidationMode to validationMode
* net.sf.oval.exception.ValidatableAnnotationNotPresent renamed to ValidatableAnnotationNotPresentException


2005-10-17 v0.3
===============
+ net.sf.oval.annotations.Validatable: added parameter applyFieldConstraintsToSetter()
  => constraints specified for fields are now automatically applied to the value parameter of the corresponding setter method
+ net.sf.oval.test.SetterValidationWithFieldConstraintsTest: added
+ net.sf.oval.constraints.NotNegative: added
* net.sf.oval.constraints.Check: renamed method isValid to isSatisfied
* net.sf.oval.ClassChecks: now uses the class loader of the constraint annotation to load the corresponding Check class
* net.sf.oval.ClassChecks: changed the logging level to from WARNING to FINE
* net.sf.oval.ValidationAspect: changed the logging level to from INFO to FINE
* net.sf.oval.exception.ValidationException: class ValidationException renamed to OValException
* net.sf.oval.exception.InvalidValueException: class InvalidValueException renamed to ConstraintException
* net.sf.oval.exception.ObjectValidationException: dropped
* net.sf.oval.exception.AccessingFieldValueFailedException: now extends net.sf.oval.exception.ReflectionException
* net.sf.oval.exception.InvokingGetterFailedException: now extends net.sf.oval.exception.ReflectionException


2005-08-17 v0.1alpha
====================
[+] initial release
