OVal 0.9
========

New features:
-------------
+ Scripting Support (Groovy, JavaScript, BeanShell) for class invariants, Pre-
  and Postconditions (@Assert, @Pre, @Post)
+ Automatic check of class invariants on calls to all non-private methods
+ Check of class invariants, pre-, postconditions can be separately enabled or 
  disabled during runtime
+ New constraints (@CheckWith, @Future, @HasSubstring, @Max, @MaxLength, 
  @MaxSize, @Min, @MinLength, @MinSize, @Past)
+ validating/guarding of static fields and methods is now supported
+ introduced the concept of constraint profiles
+ added Guard.setExceptionTranslator() allowing you to change the type of 
  exception that is thrown on constraint violations

Migration Notes:
----------------
In the effort to add all the new features and to make OVal 1.0 release ready, 
a large part of OVal's code base has been refactored. 

This led to certain changes in the API:

a) Packages with names in plural have been changed to singular
   (e.g. net.sf.oval.constraints => net.sf.oval.constraint)
b) Everything related to programming by contract has been moved into a new 
   package called net.sf.oval.guard. This includes ConstraintsViolatedListener,
   GuardAspect, Guard, @PreValidateThis, @PostValidateThis and others.
c) The Guard class now extends the Validator class, therefore the 
   Guard.getValidator() method has been removed.
d) For class invariants are now checked by default for guarded classes on every
   call to non-private methods. If you require the old behaviour you can disable 
   automatic invariant checking via 
   MyGuardAspect.aspectOf().getGuard().setInvariantCheckingActivated(false)
e) Getter methods now need to be annotated with @IsInvariant if their return
   value should be checked on a object validation via 
   Validator.validate(Object)
f) The Guard's setReportingMode() methods have been replaced with 
   setInProbeMode methods.
