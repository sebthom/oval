<?xml version="1.0" encoding="UTF-8"?>
<!-- XSD for OVal -->
<schema xmlns="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://oval.sf.net/oval-configuration"
	xmlns:tns="http://oval.sf.net/oval-configuration">
	<!--
		***************************
		top-level configuration element
		***************************
	-->
	<element name="oval">
		<annotation>
			<documentation>The oval element is the root of the descriptor.</documentation>
		</annotation>
		<complexType>
			<choice minOccurs="0" maxOccurs="unbounded">
				<element name="class" type="tns:Class" />
				<element name="constraintSet" type="tns:ConstraintSet" />
			</choice>
		</complexType>
	</element>

	<!--
		***************************
		supporting types
		***************************
	-->
	<simpleType name="javaIdentifier">
		<annotation>
			<documentation>
				http://stackoverflow.com/questions/5205339/regular-expression-matching-fully-qualified-java-classes
			</documentation>
		</annotation>
		<restriction base="string">
			<pattern value="[\p{L}_$]+[\p{L}\p{N}_$]*" />
		</restriction>
	</simpleType>

	<simpleType name="javaFQIdentifier">
		<annotation>
			<documentation>
				http://stackoverflow.com/questions/5205339/regular-expression-matching-fully-qualified-java-classes
			</documentation>
		</annotation>
		<restriction base="string">
			<pattern value="([\p{L}_$][\p{L}\p{N}_$]*\.)*[\p{L}_$][\p{L}\p{N}_$]*" />
		</restriction>
	</simpleType>

	<!--
		***************************
		abstract types
		***************************
	-->
	<complexType name="ConfigurationElement" abstract="true">
		<attribute name="overwrite" use="optional" type="boolean" />
	</complexType>
	<complexType name="ConfigurationElementWithConstraints" abstract="true">
		<annotation>
			<documentation>
				A super type for all types that use constraints.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<choice minOccurs="0" maxOccurs="unbounded">
					<element name="assert" type="tns:Assert" />
					<element name="assertConstraintSet" type="tns:AssertConstraintSet" />
					<element name="assertFalse" type="tns:AssertFalse" />
					<element name="assertFieldConstraints" type="tns:AssertFieldConstraints" />
					<element name="assertNull" type="tns:AssertNull" />
					<element name="assertTrue" type="tns:AssertTrue" />
					<element name="assertURL" type="tns:AssertURL" />
					<element name="assertValid" type="tns:AssertValid" />
					<element name="checkWith" type="tns:CheckWith" />
					<element name="dateRange" type="tns:DateRange" />
					<element name="digits" type="tns:Digits" />
					<element name="equalToField" type="tns:EqualToField" />
					<element name="email" type="tns:Email" />
					<element name="future" type="tns:Future" />
					<element name="hasSubstring" type="tns:HasSubstring" />
					<element name="instanceOf" type="tns:InstanceOf" />
					<element name="instanceOfAny" type="tns:InstanceOfAny" />
					<element name="length" type="tns:Length" />
					<element name="matchPattern" type="tns:MatchPattern" />
					<element name="max" type="tns:Max" />
					<element name="maxLength" type="tns:MaxLength" />
					<element name="maxSize" type="tns:MaxSize" />
					<element name="memberOf" type="tns:MemberOf" />
					<element name="min" type="tns:Min" />
					<element name="minLength" type="tns:MinLength" />
					<element name="minSize" type="tns:MinSize" />
					<element name="noSelfReference" type="tns:NoSelfReference" />
					<element name="notEmpty" type="tns:NotEmpty" />
					<element name="notEqual" type="tns:NotEqual" />
					<element name="notEqualToField" type="tns:NotEqualToField" />
					<element name="notMatchPattern" type="tns:NotMatchPattern" />
					<element name="notMemberOf" type="tns:NotMemberOf" />
					<element name="notNegative" type="tns:NotNegative" />
					<element name="notNull" type="tns:NotNull" />
					<element name="past" type="tns:Past" />
					<element name="range" type="tns:Range" />
					<element name="size" type="tns:Size" />
					<element name="validateWithMethod" type="tns:ValidateWithMethod" />
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ElementsWithProfiles" mixed="true" abstract="true">
		<sequence minOccurs="0" maxOccurs="1">
			<element name="profiles" minOccurs="0" maxOccurs="1" type="tns:Profiles" />
		</sequence>
	</complexType>
	<complexType name="Constraint" mixed="true" abstract="true">
		<complexContent>
			<extension base="tns:ElementsWithProfiles">
				<choice minOccurs="0" maxOccurs="unbounded">
					<element name="appliesTo">
						<annotation>
							<documentation>
								In case the constraint is declared for an array, collection or map this controls how
								the constraint
								is applied to it and it's child objects.
							</documentation>
						</annotation>
						<complexType>
							<sequence>
								<element name="constraintTarget" minOccurs="0" maxOccurs="unbounded">
									<simpleType>
										<restriction base="string">
											<enumeration value="CONTAINER">
												<annotation>
													<documentation>apply the constraint to the collection / map / array object itself</documentation>
												</annotation>
											</enumeration>
											<enumeration value="KEYS">
												<annotation>
													<documentation>apply the constraint to the keys of a map</documentation>
												</annotation>
											</enumeration>
											<enumeration value="VALUES">
												<annotation>
													<documentation>apply the constraint to the values of a the map / the items of the collection / the elements
														of the array
													</documentation>
												</annotation>
											</enumeration>
										</restriction>
									</simpleType>
								</element>
							</sequence>
						</complexType>
					</element>
				</choice>
				<attribute name="errorCode" type="string" use="optional" />
				<attribute name="message" type="string" use="optional" />
				<attribute name="severity" type="string" use="optional" />
				<attribute name="target" type="string" use="optional">
					<annotation>
						<documentation>An expression to specify where in the object graph relative from this object the expression should
							be applied.
						</documentation>
					</annotation>
				</attribute>
				<attribute name="when" type="string" use="optional">
					<annotation>
						<documentation>
							Sets the formula returning true if this constraint shall be evaluated and false if it shall be
							ignored for the current validation.
						</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>

	<!--
		***************************
		shared elements
		***************************
	-->
	<complexType name="ConstraintSet">
		<annotation>
			<documentation>
				Defines a constraint set
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElementWithConstraints">
				<attribute name="id" use="required" type="ID" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Profiles">
		<sequence>
			<element name="string" type="string" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>
	<simpleType name="ScriptingLanguage">
		<restriction base="string">
			<enumeration value="bsh" />
			<enumeration value="beanshell" />
			<enumeration value="js" />
			<enumeration value="javascript" />
			<enumeration value="jexl" />
			<enumeration value="jruby" />
			<enumeration value="groovy" />
			<enumeration value="ognl" />
			<enumeration value="ruby" />
			<enumeration value="mvel" />
		</restriction>
	</simpleType>

	<!--
		***************************
		elements with constraints
		***************************
	-->
	<complexType name="Class">
		<annotation>
			<documentation>
				Constraints configuration for a specific class
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<sequence>
					<element name="object" type="tns:Object" minOccurs="0" maxOccurs="1" />
					<choice minOccurs="0" maxOccurs="unbounded">
						<element name="field" type="tns:Field" />
						<element name="constructor" type="tns:Constructor" />
						<element name="method" type="tns:Method" />
					</choice>
				</sequence>
				<attribute name="applyFieldConstraintsToConstructors" use="optional" type="boolean" default="false">
					<annotation>
						<documentation>Automatically apply field constraints to the corresponding parameters of constructors declared
							within the same class. A corresponding parameter is a parameter with the same name and type as the field.
						</documentation>
					</annotation>
				</attribute>
				<attribute name="applyFieldConstraintsToSetters" use="optional" type="boolean" default="false">
					<annotation>
						<documentation>Automatically apply field constraints to the single parameter of the corresponding setter methods
							declared within the same class. A corresponding setter method is a method following the JavaBean convention and
							its parameter has as the same type as the field.
						</documentation>
					</annotation>
				</attribute>
				<attribute name="assertParametersNotNull" use="optional" type="boolean" default="false">
					<annotation>
						<documentation>Declares if parameter values of constructors and methods are expected to be not null. This can be
							weakened by using the @net.sf.oval.constraint.exclusion.Nullable annotation on specific parameters.
						</documentation>
					</annotation>
				</attribute>
				<attribute name="checkInvariants" use="optional" type="boolean" default="false">
					<annotation>
						<documentation>Declares if invariants are automatically checked after constructor execution and prior and after
							calls to non-private methods.
						</documentation>
					</annotation>
				</attribute>
				<attribute name="inspectInterfaces" use="optional" type="boolean" default="false">
					<annotation>
						<documentation>Declares if annotations can be applied to interfaces that this class implements - supporting a
							documentation function
						</documentation>
					</annotation>
				</attribute>
				<attribute name="type" use="required" type="tns:javaFQIdentifier">
					<annotation>
						<documentation source="java:java.lang.Class">The fully qualified name of the class</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Field">
		<annotation>
			<documentation>
				Constraints configuration for a field
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElementWithConstraints">
				<attribute name="name" use="required" type="tns:javaIdentifier" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Constructor">
		<annotation>
			<documentation>
				Constraints configuration for a constructor.
				To identify the correct constructor you are required to
				list all parameters in their declared order, including
				parameters you are not intending to specify constraints for.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<sequence minOccurs="0" maxOccurs="unbounded">
					<element name="parameter" type="tns:Parameter" />
				</sequence>
				<attribute name="postCheckInvariants" use="optional" type="boolean" default="false" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Method">
		<annotation>
			<documentation>
				Constraints configuration for a method. To identify the correct method you are required to list all
				parameters, including parameters you are not intending to specify constraints for.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<sequence>
					<element name="parameter" type="tns:Parameter" minOccurs="0" maxOccurs="unbounded" />
					<element name="preExecution" type="tns:PreExecution" minOccurs="0" maxOccurs="1" />
					<element name="returnValue" type="tns:ReturnValue" minOccurs="0" maxOccurs="1" />
					<element name="postExecution" type="tns:PostExecution" minOccurs="0" maxOccurs="1" />
				</sequence>
				<attribute name="name" use="required" type="tns:javaIdentifier" />
				<attribute name="isInvariant" use="optional" type="boolean" default="false" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Parameter">
		<annotation>
			<documentation>
				Constraints configuration for a constructor/method parameter
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElementWithConstraints">
				<sequence>
					<element name="nullable" minOccurs="0" maxOccurs="unbounded" type="tns:Nullable" />
				</sequence>
				<attribute name="type" use="required" type="tns:javaFQIdentifier" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ReturnValue">
		<annotation>
			<documentation>
				Constraints configuration for the return value of a method
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElementWithConstraints">
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Object">
		<annotation>
			<documentation>
				Constraints configuration for constraints on object level
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<choice minOccurs="0" maxOccurs="unbounded">
					<element name="assert" type="tns:Assert" />
					<element name="checkWith" type="tns:CheckWith" />
					<element name="validateWithMethod" type="tns:ValidateWithMethod" />
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="PreExecution" mixed="true">
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<sequence minOccurs="0" maxOccurs="unbounded">
					<element name="pre" type="tns:Pre" />
				</sequence>
				<attribute name="checkInvariants" type="boolean"></attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="PostExecution" mixed="true">
		<complexContent>
			<extension base="tns:ConfigurationElement">
				<sequence>
					<element name="post" minOccurs="0" maxOccurs="unbounded" type="tns:Post" />
				</sequence>
				<attribute name="checkInvariants" type="boolean" use="optional" />
			</extension>
		</complexContent>
	</complexType>

	<!--
		***************************
		constraint elements
		***************************
	-->
	<complexType name="Pre" mixed="true">
		<annotation>
			<documentation>method pre condition - special programming by contract constraints</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="expr" type="string" use="required" />
				<attribute name="lang" use="required" type="tns:ScriptingLanguage" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Post" mixed="true">
		<annotation>
			<documentation>method post condition - special programming by contract constraints</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="expr" type="string" use="required" />
				<attribute name="lang" use="required" type="tns:ScriptingLanguage" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Assert" mixed="true">
		<annotation>
			<documentation>
				Check if evaluating the expression in the specified expression language returns true.
				The node body
				contains the script expression as CDATA.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="expr" type="string" />
				</sequence>
				<attribute name="lang" use="required" type="tns:ScriptingLanguage" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="AssertConstraintSet" mixed="true">
		<annotation>
			<documentation>
				Check if the value satisfies the all constraints of specified constraint set
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ElementsWithProfiles">
				<choice minOccurs="0" maxOccurs="unbounded">
					<element name="appliesTo">
						<annotation>
							<documentation>
								In case the constraint is declared for an array, collection or map this controls how
								the constraint
								is applied to it and it's child objects.
							</documentation>
						</annotation>
						<complexType>
							<sequence>
								<element name="constraintTarget" minOccurs="0" maxOccurs="unbounded">
									<simpleType>
										<restriction base="string">
											<enumeration value="CONTAINER">
												<annotation>
													<documentation>apply the constraint to the collection / map / array object itself</documentation>
												</annotation>
											</enumeration>
											<enumeration value="KEYS">
												<annotation>
													<documentation>apply the constraint to the keys of a map</documentation>
												</annotation>
											</enumeration>
											<enumeration value="VALUES">
												<annotation>
													<documentation>apply the constraint to the values of a the map / the items of the collection / the elements
														of the array
													</documentation>
												</annotation>
											</enumeration>
										</restriction>
									</simpleType>
								</element>
							</sequence>
						</complexType>
					</element>
				</choice>
				<attribute name="id" type="IDREF" use="required" />
				<!-- TODO -->
				<attribute name="source" type="string" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="AssertFalse" mixed="true">
		<annotation>
			<documentation>
				Check if the value is false.
				Note: This constraint is also satisfied when the value to validate is
				null, therefore you might also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="AssertFieldConstraints" mixed="true">
		<annotation>
			<documentation>
				Check if the value satisfies the constraints defined for the specified field.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ElementsWithProfiles">
				<attribute name="fieldName" type="tns:javaIdentifier" use="required" />
				<attribute name="declaringClass" type="tns:javaFQIdentifier" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="AssertNull" mixed="true">
		<annotation>
			<documentation>
				Check if null.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="AssertTrue" mixed="true">
		<annotation>
			<documentation>
				Check if the value is true.
				Note: This constraint is also satisfied when the value to validate is null,
				therefore you might also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="AssertURL" mixed="true">
		<annotation>
			<documentation>
				Check if the value is a valid URL.
				Note: This constraint is also satisfied when the value to validate
				is null,
				therefore you might also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="permittedURIScheme" type="tns:permittedURIScheme" minOccurs="0" maxOccurs="unbounded" />
				</sequence>
				<attribute name="connect" type="boolean" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="permittedURIScheme">
		<restriction base="string" />
	</simpleType>
	<complexType name="AssertValid" mixed="true">
		<annotation>
			<documentation>
				Check if the value passes a validation by Validator.validate().
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="requireValidElements" type="boolean" use="optional">
					<annotation>
						<documentation>deprecated, use appliesTo</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CheckWith" mixed="true">
		<annotation>
			<documentation>
				Check the value by a method of the same class that takes the value as argument and returns true if
				valid and false if invalid.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="simpleCheck" type="tns:SimpleCheck" />
				</sequence>
				<attribute name="ignoreIfNull" type="boolean" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="SimpleCheck" mixed="true">
		<annotation>
			<documentation>
				Name of a class implementing net.sf.oval.constraint.check.CheckWithCheck.SimpleCheck
			</documentation>
		</annotation>
		<attribute name="class" type="tns:javaFQIdentifier" />
	</complexType>
	<complexType name="DateRange" mixed="true">
		<annotation>
			<documentation>
				Check if the date is within the a date range.
				Note: This constraint is also satisfied when the value to
				validate is
				null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="format" type="string" use="optional" />
				<attribute name="max" type="string" use="optional" />
				<attribute name="min" type="string" use="optional" />
				<attribute name="tolerance" type="integer" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Digits" mixed="true">
		<annotation>
			<documentation>
				Check if the String representation has the given max/min number of integral and fractional digits.
				Note: This constraint is also satisfied when the value to validate is null, therefore you might also need to declare
				the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="maxInteger" type="integer" use="optional" />
				<attribute name="minInteger" type="integer" use="optional" />
				<attribute name="maxFraction" type="integer" use="optional" />
				<attribute name="minFraction" type="integer" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Email" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation is a valid e-mail address.
				Note: This constraint is also satisfied
				when the value to validate is null, therefore you might also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="EqualToField" mixed="true">
		<annotation>
			<documentation>
				Check if value equals the value of the referenced field.
				Note: This constraint is also satisfied when
				the value to validate is null,
				therefore you might also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="declaringClass" type="tns:javaFQIdentifier" use="optional" />
				<attribute name="fieldName" type="tns:javaIdentifier" use="required" />
				<attribute name="useGetter" type="boolean" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Future" mixed="true">
		<annotation>
			<documentation>
				Check if the date is in the future.
				Note: This constraint is also satisfied when the value to validate
				is null,
				therefore you might also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="tolerance" type="integer" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="HasSubstring" mixed="true">
		<annotation>
			<documentation>
				Check if the string contains a certain substring.
				Note: This constraint is also satisfied when the
				value to validate is null,
				therefore you might also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="ignoreCase" type="boolean" use="required" />
				<attribute name="substring" type="string" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InstanceOf" mixed="true">
		<annotation>
			<documentation>
				Check if the value is an instance of the specified class or implements
				<u>all</u>
				specified interfaces.
				Note: This constraint is also satisfied when the value to validate is null,
				therefore you might
				also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="types" type="tns:Types" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InstanceOfAny" mixed="true">
		<annotation>
			<documentation>
				Check if the value is an instance of the specified class or implements
				<u>
					one
				</u>
				of the specified interfaces.
				Note: This constraint is also satisfied when the value to validate is null, therefore
				you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="types" type="tns:Types" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Types" mixed="true">
		<sequence>
			<element name="types">
				<complexType>
					<sequence minOccurs="1" maxOccurs="unbounded">
						<element name="java-type" type="tns:javaFQIdentifier" />
					</sequence>
				</complexType>
			</element>
		</sequence>
	</complexType>
	<complexType name="Length" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation has certain length.
				Note: This constraint is also satisfied when the
				value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="max" type="integer" use="optional" />
				<attribute name="min" type="integer" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MatchPattern" mixed="true">
		<annotation>
			<documentation>
				Check if the specified regular expression pattern is matched.
				Note: This constraint is also satisfied
				when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="pattern" minOccurs="0" maxOccurs="unbounded">
						<complexType>
							<attribute name="flags" type="integer" use="optional" />
							<attribute name="pattern" type="string" use="required" />
						</complexType>
					</element>
				</sequence>
				<attribute name="matchAll" type="boolean" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Max" mixed="true">
		<annotation>
			<documentation>
				Check if the number is smaller than or equal to [max].
				Note: This constraint is also satisfied when the
				value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="max" type="integer" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MaxLength" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation does not exceed the given length.
				Note: This constraint is also
				satisfied when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="max" type="integer" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MaxSize" mixed="true">
		<annotation>
			<documentation>
				Check if an array or collection does not exceed the given size.
				Note: This constraint is also satisfied
				when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="max" type="integer" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Members">
		<sequence>
			<element name="string" minOccurs="0" maxOccurs="unbounded" type="string" />
		</sequence>
	</complexType>
	<complexType name="MemberOf" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation is contained in the given string array.
				Note: This constraint is
				also satisfied when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="members" minOccurs="0" maxOccurs="unbounded" type="tns:Members" />
				</sequence>
				<attribute name="ignoreCase" type="boolean" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Min" mixed="true">
		<annotation>
			<documentation>
				Check if the number is greater than or equal to [min]
				Note: This constraint is also satisfied when the
				value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="min" type="integer" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MinLength" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation has at least the given length.
				Note: This constraint is also
				satisfied when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="min" type="integer" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MinSize" mixed="true">
		<annotation>
			<documentation>
				Check if the array or collection has at least the given number of elements.
				Note: This constraint is
				also satisfied when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="min" type="integer" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NoSelfReference" mixed="true">
		<annotation>
			<documentation>
				Check that the value is not a reference to the validated object itself.
				This is e.g. useful to avoid
				circular references.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="NotBlank" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation is not empty and does not only contain white spaces.
				Note: This
				constraint is also satisfied when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="NotEmpty" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation is not empty ("").
				Note: This constraint is also satisfied when the
				value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="NotEqual" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation does not equal a given string.
				Note: This constraint is also
				satisfied when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="ignoreCase" type="boolean" use="required" />
				<attribute name="testString" type="string" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NotEqualToField" mixed="true">
		<annotation>
			<documentation>
				Check if value does not equal the value of the referenced field.
				Note: This constraint is also
				satisfied when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="fieldName" type="tns:javaIdentifier" use="required" />
				<attribute name="declaringClass" type="tns:javaFQIdentifier" use="optional" />
				<attribute name="useGetter" type="boolean" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NotMatchPattern" mixed="true">
		<annotation>
			<documentation>
				Check if the specified regular expression pattern does not match.
				Note: This constraint is also
				satisfied when the value to
				validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="pattern" minOccurs="0" maxOccurs="unbounded">
						<complexType>
							<attribute name="flags" type="integer" use="optional" />
							<attribute name="pattern" type="string" use="required" />
						</complexType>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NotMemberOf" mixed="true">
		<annotation>
			<documentation>
				Check if the string representation is not contained in the given string array.
				Note: This constraint is
				also satisfied when the value to validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<sequence>
					<element name="members" minOccurs="0" maxOccurs="unbounded" type="tns:Members" />
				</sequence>
				<attribute name="ignoreCase" type="boolean" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NotNegative" mixed="true">
		<annotation>
			<documentation>
				Check if the number is greater or equal zero.
				Note: This constraint is also satisfied when the value to
				validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="NotNull" mixed="true">
		<annotation>
			<documentation>
				Check if not null.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint" />
		</complexContent>
	</complexType>
	<complexType name="Past" mixed="true">
		<annotation>
			<documentation>
				Check if the date is in the past.
				Note: This constraint is also satisfied when the value to validate is
				null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="tolerance" type="integer" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Range" mixed="true">
		<annotation>
			<documentation>
				Check if the number is in the given range.
				Note: This constraint is also satisfied when the value to
				validate is null, therefore you might also need to declare the
				NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="max" type="integer" use="optional" />
				<attribute name="min" type="integer" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="Size" mixed="true">
		<annotation>
			<documentation>
				Check if the array or collection has the given size.
				Note: This constraint is also satisfied when the
				value to validate is null,
				therefore you might also need to declare the NotNull constraint.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="max" type="integer" use="optional" />
				<attribute name="min" type="integer" use="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ValidateWithMethod" mixed="true">
		<annotation>
			<documentation>
				Check the value by a method of the same class that takes the value as argument and returns true if
				valid and false if invalid
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:Constraint">
				<attribute name="ignoreIfNull" type="boolean" use="optional" />
				<attribute name="methodName" type="tns:javaIdentifier" use="required" />
				<attribute name="parameterType" type="tns:javaFQIdentifier" use="required" />
			</extension>
		</complexContent>
	</complexType>

	<!--
		***************************
		constraint exclusion elements
		***************************
	-->
	<complexType name="Nullable" mixed="true">
		<annotation>
			<documentation>Allows a value to be nullable.</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ElementsWithProfiles" />
		</complexContent>
	</complexType>
</schema>